// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String?  @unique
  name      String?
  role      String   @default("USER") // "USER" or "ADMIN"
  password  String?  // Hashed password
  passwordSetAt DateTime? // When password was last set
  mustChangePassword Boolean @default(false) // Force password change on next login
  passwordResetToken String? // For password reset functionality
  passwordResetExpires DateTime? // Password reset token expiration
  lastPasswordChange DateTime? // Track password change history
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  accessCodes AccessCode[]
  sessions    Session[]
  videos      Video[]
  
  @@map("users")
}

model AccessCode {
  id        String     @id @default(cuid())
  code      String     @unique
  type      String     // "USER" or "ADMIN"
  isActive  Boolean    @default(true)
  expiresAt DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  // Relations
  userId    String?
  user      User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@map("access_codes")
}

model Video {
  id          String   @id @default(cuid())
  title       String
  description String?
  filename    String
  originalName String
  mimeType    String
  size        Int
  duration    Int?     // in seconds
  thumbnailUrl String?
  videoUrl    String
  cloudinaryId String?
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  uploadedById String?
  uploadedBy   User?   @relation(fields: [uploadedById], references: [id], onDelete: SetNull)
  
  @@map("videos")
}

model Session {
  id        String   @id @default(cuid())
  sessionToken String @unique
  userId    String
  expires   DateTime
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model ActivityLog {
  id        String     @id @default(cuid())
  action    String
  details   String?
  ipAddress String?
  userAgent String?
  userId    String?
  createdAt DateTime   @default(now())
  
  @@map("activity_logs")
}

model PageSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String?
  description String?
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())
  
  @@map("page_settings")
} 