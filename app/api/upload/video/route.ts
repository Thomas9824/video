import { handleUpload, type HandleUploadBody } from '@vercel/blob/client';
import { NextResponse } from 'next/server';

export async function POST(request: Request): Promise<NextResponse> {
  const body = (await request.json()) as HandleUploadBody;

  try {
    const jsonResponse = await handleUpload({
      body,
      request,
      onBeforeGenerateToken: async (pathname, clientPayload) => {
        // Vous pouvez ajouter ici des v√©rifications d'authentification
        console.log('üìù G√©n√©ration du token pour:', pathname);
        
        return {
          allowedContentTypes: ['video/mp4', 'video/webm', 'video/avi'],
          tokenPayload: JSON.stringify({
            uploadedAt: new Date().toISOString(),
          }),
        };
      },
      onUploadCompleted: async ({ blob, tokenPayload }) => {
        console.log('‚úÖ Upload termin√©:', blob.url);
        
        // Ici on pourrait mettre √† jour la base de donn√©es si n√©cessaire
        // Pour l'instant, on laisse l'API principale g√©rer cela
        
        try {
          console.log('üîÑ Upload termin√© avec succ√®s');
        } catch (error) {
          console.error('‚ùå Erreur lors de la finalisation:', error);
        }
      },
    });

    return NextResponse.json(jsonResponse);
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'upload:', error);
    return NextResponse.json(
      { error: 'Erreur lors de l\'upload' },
      { status: 400 }
    );
  }
} 